extends layout

block content
    style.
        video {
            top: 0px;
            right: 0px;
            bottom: 0px;
            left: 0px;
            max-height: 100%;
            max-width: 100%;
            margin: auto;
            object-fit: contain;
            height: 100%;
            width: 100%;
            background-color: black;
        }

        body {
            background-color: black;
            padding: 0px;
            margin: 0px;
        }

        h2, p, h4, h3 {
            color: white;
        }

        .video-details {
            margin-top: -13px;
            margin-left: 15px;
        }

        .description {
            line-height:23px;
            font-family: serif;
            font-size: 44px;
            line-height: 80px;
        }

        .pulled-right {
            max-width: 500px;
            margin-right: 0px;
            width: 200px;
            position: relative;
            float: right;
            top: -6px;
        }

        .video-title {
            font-size: 58px;
            margin-top: 25px;
        }

        .hide-cursor {
            cursor: none;
        }

        .plyr {
            max-height: 94.6vh;
        }

        #back-button {
            font-size: 14px;
            margin-top: 12px;
        }

        #download-button {
            font-size: 14px;
            margin-top: 5px;
        }

        .upload-details-holder {
            /*height: 1300px;*/
        }

        .upload-details h4:not(.description) {
            font-size: 35px;
        }

        .vjs-text-track-display div div {
            font-size: 40px !important;
        }

        .video-js {
            max-height: 400px;
        }

        .bottomSection {
            padding-left: 20px;
        }

        .downloadLinks a {
            color: white;
        }

        .links div, .links p, .links a p {
            display: inline;
        }

        .links a p {
            margin-left: 10px;
        }

        .links {
            margin-bottom: 10px;
        }

        @media (min-width: 320px) {
            /* smartphones, portrait iPhone, portrait 480x320 phones (Android) */
        }

        @media (min-width: 480px) {
            /* smartphones, Android phones, landscape iPhone */
        }



        /** larger than this size **/
        @media (min-width: 320px) {

            .plyr__captions  .plyr__caption {
                font-size: 21px;
                line-height: 33px;
            }
        }

        @media (min-width: 801px) {

            .plyr__captions  .plyr__caption {
                font-size: 21px;
                line-height: 33px;
            }
            /* tablet, landscape iPad, lo-res laptops ands desktops */
        }

        @media (min-width: 1025px) {
            /* big landscape tablets, laptops, and desktops */
        }

        /* not mobile */
        @media (min-width: 1281px) {
            .plyr__captions .plyr__caption {
                font-size: 21px;
                line-height: 33px;
            }
            /* hi-res laptops and desktops */
        }

        @media (max-width: 900px) {
            .plyr__volume {
                display: none !important;
            }

            .plyr__time--current, .plyr__time--duration {
                font-size: 24px !important;
            }

            body {
                font-size: 28px;
            }

            .plyr__control svg {
                width: 53px !important;
                height: 53px !important;
            }


            button[data-plyr="language"], button[data-plyr="settings"] {
                font-size: 28px !important;
            }

            /* hi-res laptops and desktops */
        }

        .buttons {
            margin-top: 9px;
        }

        .buttons div {
            display: inline-block;
            margin-right: 10px;
            cursor: pointer;
        }

        .buttons div p {
            margin-top: 4px;
            margin-bottom: 4px;
        }

        .buttons div {
            display: inline-block;
            margin-right: 10px;
        }

        .buttons #increaseSize p:hover, .buttons #increaseLineHeight p:hover  {
            color: #55ed55;
        }

        .buttons #decreaseSize p:hover, .buttons #decreaseLineHeight p:hover {
            color: #df2b2b;
        }

        .plyr__poster {
            display: none;
        }

        .plyr .plyr__captions {
            display: inline-table !important;
            text-align: left !important;
            cursor: pointer;
            max-width: 99%;
            z-index: 9999;
            padding: 0px;
            width: unset !important;
            position: absolute;
            bottom: 68px;
        }

        .plyr:not(.plyr--hide-controls) .plyr__controls:not(:empty)~.plyr__captions {
            transform: unset !important;
        }

        .plyr__caption {
            text-wrap: balance;
            display: block;
        }

        .plyr__controls {
            flex-wrap: wrap;
            justify-content: left !important;
        }

        .plyr__progress__container {
            flex-basis: 100% !important;
        }

        .plyr__progress {
            max-width: 99%;
            text-align: center;
            margin: 0 auto;
            margin-bottom: 5px;
        }

        button[data-plyr=captions] {
            margin-left: auto !important;
        }

        input[data-plyr=seek], input[data-plyr=volume] {
            cursor: pointer;
        }



    div
        div.video-containing-div
            video#player(playsinline controls='' autoplay='true' name='media' preload="auto")
                // file extension includes the .
                source(src=`${filePathWithoutExtension}${processingData.fileExtension}`)
                // TODO: replace with loop (has to fix on the backend)
                if languagesToLoop.length > 0
                    each loopLanguage in languagesToLoop
                        track(kind='captions' label=loopLanguage.name srclang=loopLanguage.languageCode src=`${filePathWithoutExtension}_${loopLanguage.name}.vtt` default='')
                    track(kind='captions' label=processingData.language srclang=processingData.languageCode src=`${filePathWithoutExtension}_${processingData.language}.vtt` default=true)
                else
                    track(kind='captions' label=processingData.language srclang=processingData.languageCode src=`${filePathWithoutExtension}.vtt` default=true)

    div.bottomSection
        .buttons
            #increaseSize
                p Subtitle Text Size +
            #decreaseSize
                p Subtitle Text Size -
            #increaseLineHeight
                p Subtitle Spacing +
            #decreaseLineHeight
                p Subtitle Spacing -

        div.downloadLinks
            div.startAnotherTranscription(style="max-width:191px;")
                a(href=`/`)
                    p Start Another Transcription

            // ORIGINAL LANGUAGE FILES
            if processingData.translatedLanguages.length > 1
                p Original Language:
            div.srtLinks.links
                p SRT (#{processingData.language})
                div
                    a(download href=`${filePathWithoutExtension}.srt`)
                        p Download
            div.vttLinks.links
                p VTT (#{processingData.language})
                div
                    a(href=`${filePathWithoutExtension}.vtt`)
                        p View
                div
                    a(download href=`${filePathWithoutExtension}.vtt`)
                        p Download

            div.txtLinks.links
                p TXT (#{processingData.language})
                div
                    a(download href=`${filePathWithoutExtension}.txt`)
                        div
                            a(href=`${filePathWithoutExtension}.txt`)
                                p View
                        div
                            a(download href=`${filePathWithoutExtension}.txt`)
                                p Download

            // TRANSLATED FILES //
            if processingData.translatedLanguages.length > 0
                p Translations:
            // translated VTT files
            each language in processingData.translatedLanguages
                div.links
                    p VTT (#{language})
                    div

                        div
                            a(href=`${filePathWithoutExtension}_${language}.vtt`)
                                p View
                        div
                            a(href=`${filePathWithoutExtension}_${language}.vtt` download)
                                p Download
            div.links
                a(download href=`${filePathWithoutExtension}${processingData.fileExtension}`)
                    p(style="margin-left:0px") Download File


        div.fileDetails
            each property, value in processingData
                p #{value}: #{property}
                //p Filename: #{processingData.filename}

    script(src = 'https://cdn.plyr.io/3.7.2/plyr.js')
    link(rel='stylesheet' href='https://cdnjs.cloudflare.com/ajax/libs/plyr/3.7.2/plyr.css' integrity='sha512-SwLjzOmI94KeCvAn5c4U6gS/Sb8UC7lrm40Wf+B0MQxEuGyDqheQHKdBmT4U+r+LkdfAiNH4QHrHtdir3pYBaw==' crossorigin='anonymous' referrerpolicy='no-referrer')
    script.
      l = console.log;

      let player;

      function findIndexNumber(language, text) {
        const video = $('video')[0]
        const textTracks = video.textTracks;

        let foundIndex;
        let index = 0;
        for (const track of textTracks) {
          const trackLanguage = track.label
          if (language === trackLanguage) {
            for (const cue of track.cues) {
              if (cue.text === text) {
                foundIndex = index
              }
              index++
            }
          }
        }

        return foundIndex
      }

      function loadTextTracks(){
        const video = $('video')[0]
        const textTracks = video.textTracks;
        for (const track of textTracks) {
          track.mode = 'hidden';
        }
      }
      loadTextTracks()

      function findTextFromIndexNumber(language, index) {
        const video = $('video')[0]
        const textTracks = video.textTracks;

        let text;
        for (const track of textTracks) {
          const trackLanguage = track.label
          if (language === trackLanguage) {
            text = track.cues[index]?.text
            return text
          }
        }
        return false;
      }

      function getCurrentLanguageAndTrack() {
        const video = $('video')[0]
        const textTracks = video.textTracks;
        const trackNumber = player.currentTrack;
        const currentTrack = textTracks[trackNumber]

        const language = currentTrack.label;
        const text = currentTrack.activeCues?.[0]?.text;

        const indexNumber = findIndexNumber(language, text);

        return {
          language,
          text,
          indexNumber
        }
      }

      let subtitlesFontSize, subtitlesLineHeight;

      $(document).ready(function () {

        const anchorTags = document.querySelectorAll('a');

        anchorTags.forEach((anchor) => {
          anchor.setAttribute('target', '_blank');
        });

        function adjustFontSize(direction) {

          const currentLineHeight = $('.plyr__caption').css('line-height');
          const currentLineHeight1 = currentLineHeight.replace('px', '');
          const newLineHeight = parseInt(currentLineHeight1) + (direction === 'increase' ? 2 : -2);

          const currentFontSize = $('.plyr__caption').css('font-size');
          const currentFontSize1 = currentFontSize.replace('px', '');
          const newFontSize = parseInt(currentFontSize1) + (direction === 'increase' ? 2 : -2);


          subtitlesFontSize = newFontSize;
          subtitlesLineHeight = newLineHeight;

          l('subtitlesFontSize', subtitlesFontSize)
          l('subtitlesLineHeight', subtitlesLineHeight)


          // $('.plyr__caption').attr('style', `font-size: ${newFontSize}px !important`);
          $('.plyr__caption').css('line-height', `${newLineHeight}px`);
          $('.plyr__caption').css('font-size', `${newFontSize}px`);
        }

        function adjustLineHeight(direction) {
          const currentLineHeight = $('.plyr__caption').css('line-height');
          const currentLineHeight1 = currentLineHeight.replace('px', '');
          const newLineHeight = parseInt(currentLineHeight1) + (direction === 'increase' ? 2 : -2);


          subtitlesLineHeight = newLineHeight;

          l('subtitlesLineHeight', subtitlesLineHeight)

          // $('.plyr__caption').attr('style', `font-size: ${newFontSize}px !important`);
          $('.plyr__caption').css('line-height', `${newLineHeight}px`);
        }

        $('#increaseSize').click(function (event) {
          adjustFontSize('increase');
        });

        $('#decreaseSize').click(function (event) {
          adjustFontSize('decrease');
        });

        $('#increaseLineHeight').click(function (event) {
          adjustLineHeight('increase');
        });

        $('#decreaseLineHeight').click(function (event) {
          adjustLineHeight('decrease');
        });

        console.log("ready!");
        var controls =
          [
            'progress', // The progress bar and scrubber for playback and buffering
            'play-large', // The large play button in the center
            // 'restart', // Restart playback
            // 'rewind', // Rewind by the seek time (default 10 seconds)
            'play', // Play/pause playback
            // 'fast-forward', // Fast forward by the seek time (default 10 seconds)
            'volume', // Volume control
            'volume-slider',
            'current-time', // The current time of playback
            'duration', // The full duration of the media
            'mute', // Toggle mute
            'captions', // Toggle captions
            'settings', // Settings menu
            // 'pip', // Picture-in-picture (currently Safari only)
            // 'airplay', // Airplay (currently Safari only)
            // 'download', // Show a download button with a link to either the current source or a custom URL you specify in your options
            'fullscreen'
          ];

        player = new Plyr('#player', {
          disableContextMenu: true,
          controls,
          captions: { active: true, language: 'auto', update: true },
          settings: ['captions', 'secondCaptions']
        });

        player.on('ready', event => {
          $('.plyr__volume').append($('.plyr__volume').children('').get().reverse());
        });

        l('captions');

        // probably better to do on plyr ready if available as event
        setTimeout(function(){

          $(function () {
            $('.plyr__menu__container > div > div > div > button')[1].removeAttribute('hidden')

            $('.plyr__menu__container > div > div > div > button').eq(1).html('<span>Second Captions<span class="plyr__menu__value">Disabled</span></span>');

            const languagesToLoop = !{JSON.stringify(languagesToLoop)};
            const defaultLang = !{JSON.stringify(processingData.language)};

            const menuText = `
            <button data-plyr="language" type="button" role="menuitemradio" class="plyr__control" aria-checked="true" value="-1">
                <span>Disabled</span>
            </button>
            ${languagesToLoop.map((language, index) => {
                return `
                <button data-plyr="language" id="languageName" type="button" role="menuitemradio" class="plyr__control" aria-checked="false" value="${index}">
                    <span id="languageValue" value="${language.name}">${language.name}<span class="plyr__menu__value"><span class="plyr__badge">${language.languageCode.toUpperCase()}</span></span></span>
                </button>
                `;
            }).join('')}`;

            $("div[id*='secondCaptions'] div").html(menuText)

            $("div[id*='secondCaptions'] button span").eq(0).text('Disabled')

            $("div[id*='secondCaptions'] div").html(menuText)

            $("div[id*='secondCaptions'] div button").click(function () {
                $("div[id*='secondCaptions'] div button").attr("aria-checked", "false");
                let languageValue = $(this).children().text();

                if (/[A-Z]{2}$/.test(languageValue)) {
                    languageValue = languageValue.slice(0, -2);
                }

                const currentLang = getCurrentLanguageAndTrack();
                const translationText = findTextFromIndexNumber(languageValue, currentLang.indexNumber);
                const originalText = $("span.plyr__caption").text();

                $("span.plyr__caption").text(`${originalText}\n${translationText}`);

                $(this).attr("aria-checked", "true");
                $("div[id*='secondCaptions'] button span").eq(0).text(languageValue)

                $('.plyr__menu__container > div > div > div > button').eq(1)
                .find('span.plyr__menu__value')
                .text(languageValue)

                $("div[id*='secondCaptions'] button span").eq(0).click()
            })
            $('.plyr__captions').draggable({
              containment: 'plyr',
              // drag: function (event, ui) {
              // }
            });
          });


          const captionsIsPressed = $('button[data-plyr="captions"]')?.hasClass('plyr__control--pressed')

          if (!captionsIsPressed) {
            $('button[data-plyr="captions"]').click();
          }

          player.on('cuechange', function (event) {
            // console.log('event!')
            // console.log(event)

            const text = event.detail.plyr.captions.currentTrackNode.activeCues[0].text;
            const thing = getCurrentLanguageAndTrack()
            l(thing);

            const selectedTranslation = $("#languageName[aria-checked='true'] > span[id*='languageValue']").attr("value");
            if(selectedTranslation) {
                const translation = findTextFromIndexNumber(selectedTranslation, thing.indexNumber);
                const originalText = $('span.plyr__caption').text();

                $('span.plyr__caption').text(`${originalText}\n${translation}`);
            }

            // balance text not working at the moment
            if(subtitlesFontSize){
              $('.plyr__caption').css('font-size', `${subtitlesFontSize}px`);
            }

            if(subtitlesLineHeight){
              $('.plyr__caption').css('line-height', `${subtitlesLineHeight}px`);
            }


            // const language = 'Russian';
            //
            // const thing2 = findTextFromIndexNumber(language, thing.indexNumber);
            // l(thing2);
            //
            // const oldText = $('span.plyr__caption').text()
            //
            // $('span.plyr__caption').text(`${oldText}\n${thing2}`)

            l(text);
          })
        }, 200)



      });
