include controllers/page-buttons.pug

script.
  l = console.log;

  let subtitlesFontSize, subtitlesLineHeight, intervalId;

  const language = '#{processingData.language}';
  const languagesToLoop = !{JSON.stringify(languagesToLoop)};
  const allLanguages = !{JSON.stringify(allLanguages)};
  const filename = '#{renderedFilename}';

  const controls = [
    'progress', // The progress bar and scrubber for playback and buffering
    'play-large', // The large play button in the center
    //- 'restart', // Restart playback
    //- 'rewind', // Rewind by the seek time (default 10 seconds)
    'play', // Play/pause playback
    //- 'fast-forward', // Fast forward by the seek time (default 10 seconds)
    'volume', // Volume control
    'volume-slider',
    'current-time', // The current time of playback
    'duration', // The full duration of the media
    'mute', // Toggle mute
    'captions', // Toggle captions
    'settings', // Settings menu
    'pip', // Picture-in-picture (currently Safari only) // works on chrome -osb910
    //- 'airplay', // Airplay (currently Safari only)
    //- 'download', // Show a download button with a link to either the current source or a custom URL you specify in your options
    'fullscreen'
  ];

  const player = new Plyr('#player', {
    disableContextMenu: true,
    controls,
    captions: {active: true, language: 'auto', update: true},
    settings: ['captions', 'secondCaptions']
  });

  $(document).ready(() => {
    // probably better to do on plyr ready if available as event
    setTimeout(function(){

      if (allLanguages.length > 1) {
        createSecondCaptionsSetting();
      }

      const captionsIsPressed = $('button[data-plyr="captions"]')?.hasClass('plyr__control--pressed')

      if (!captionsIsPressed) {
        $('button[data-plyr="captions"]').click();
      }

      let haveSetupSecondCaptions = false;
      // set secondsDefault language
      player.on('playing', function(){
        const currentSecondLanguageDefaults = getSecondCaptionsDefaults()
        // l('currentSecondLanguageDefaults', currentSecondLanguageDefaults)
        // l(language);
        if(!haveSetupSecondCaptions){
          setTimeout(function () {
            // open menu
            $('.plyr__menu').children().eq(0).click()
            const presetLanguage = currentSecondLanguageDefaults[language];
            if (presetLanguage) {
              // set preset value
              $(`span#languageValue[value="${presetLanguage}"]`).parent().click();
              // close menu
              $('.plyr__menu').children().eq(0).click()
              haveSetupSecondCaptions = true;
            }
          }, 10)
        }
      })

      player.on('cuechange', function (event) {
        const text = event.detail.plyr.captions.currentTrackNode.activeCues[0]?.text;
        const thing = getCurrentLanguageAndTrack()
        // l(thing);

        const selectedTranslation = $("#languageName[aria-checked='true'] > span[id*='languageValue']").attr("value");
        if(selectedTranslation && selectedTranslation !== 'Disabled') {
            const translation = findTextFromIndexNumber(selectedTranslation, thing.indexNumber);
            const originalText = $('span.plyr__caption').text();

            $('span.plyr__caption').text(`${originalText}\n${translation || ''}`);
        }

        // balance text not working at the moment
        if(subtitlesFontSize){
          $('.plyr__caption').css('font-size', subtitlesFontSize);
        }

        if(subtitlesLineHeight){
          $('.plyr__caption').css('line-height', subtitlesLineHeight);
        }
        // l(text);
      })
    }, 200)
  });

  $('body').on('click', evt => {
    const target = $(evt.target);

    const [toggleDetailsBtn] = target.closest('#toggleDetails');
    toggleDetailsBtn && toggleDetails();
    const [increaseSizeBtn] = target.closest('#increaseSize');
    increaseSizeBtn && adjustFontSize('increase');
    const [decreaseSizeBtn] = target.closest('#decreaseSize');
    decreaseSizeBtn && adjustFontSize('decrease');
    const [increaseLineHeightBtn] = target.closest('#increaseLineHeight');
    increaseLineHeightBtn && adjustLineHeight('increase');
    const [decreaseLineHeightBtn] = target.closest('#decreaseLineHeight');
    decreaseLineHeightBtn && adjustLineHeight('decrease');
    const [videoPlayer] = target.closest('#player');

  });

  player.on('ready', event => {
    l('ready');
    // change position of volume button
    $('.plyr__volume').append($('.plyr__volume').children().get().reverse());

    // without this timeout it doesn't work properly
    setTimeout(() => setStoredLineHeightAndFontSizeIfExists(), 200);
  });

  player.on('playing', evt => {
    l(evt.type);
    intervalId = setInterval(function () {
      // Run your function here
      setStoredVideoProgress();
    }, 5000);
  });

  player.on('pause ended', evt => {
    l(evt.type);
    clearInterval(intervalId);
    setStoredVideoProgress(evt.type === 'ended');
  });

  player.on('loadeddata', () => {
    l('loadeddata');
    const currentStoredProgress = getStoredVideoProgress()[filename];
    player.currentTime = currentStoredProgress === player.duration ? 0 : currentStoredProgress;
  });

  $('.plyr__captions').draggable({
    containment: 'plyr',
    //- drag: (evt, ui) => {}
  });