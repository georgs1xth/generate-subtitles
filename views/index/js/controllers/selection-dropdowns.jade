script.
  const maxTransLangs = !{maxTransLangs};
  const updateSelection = option => {
    const selectedValueEl = option.closest('.wrapper').querySelector('.select-value');
    const selectedOption = option.closest('.wrapper').querySelector('.selected');
    selectedOption.classList.remove('selected');
    option.classList.add('selected');
    selectedValueEl.textContent = option.textContent;
    selectedValueEl.dataset.value = option.dataset.value;
  }

  const handleSelectionButtonClick = evt => {
    const selectWrapper = evt.target.closest('.wrapper');
    const input = selectWrapper.querySelector('.search input');
    selectWrapper.classList.toggle('active');
    l(evt.target.closest('.select-btn'));
    if (selectWrapper.classList.contains('active')) {
      input.focus();
      input.select();
      selectWrapper.querySelector('.selected')?.scrollIntoView({block: 'center', behavior: 'smooth'});
    } else {
      if (evt.target.id === 'translationSelect') {
        
      }
      selectWrapper.querySelector('.select-btn').focus(); // BUG: doesn't focus

    }
  }

  const updateSelectedTranslationLangs = () => {
    const selectedLangsEl = document.querySelector('.selected-langs');
    const selectedOptions = Array.from(document.querySelectorAll('.trans-languages .selected'));
    const selectedLangsNumEl = document.querySelector('.selected-langs-num');
    selectedLangsEl.innerHTML = selectedOptions.map(opt => `
      <li class='selected-lang' data-lang='${opt.dataset.lang}'>
        <p>${opt.textContent}</p>
        <span><i class='fa-solid fa-circle-xmark'></i></span>
      </li>
    `).join('') || 'Select languages';
    selectedLangsNumEl.textContent = selectedOptions.length;
  }

  const disableAllUnchecked = () => {
    const options = document.querySelectorAll('.trans-languages .option');
    options.forEach(lang => {
      const checkbox = lang.querySelector('input[type="checkbox"]');
      if (!checkbox.checked) {
        checkbox.setAttribute('disabled', true);
        lang.classList.add('no-pointer-events');
      }
    });
  }

  const enableAllUnchecked = () => {
    const options = document.querySelectorAll('.trans-languages .option');
    options.forEach(lang => {
      const checkbox = lang.querySelector('input[type="checkbox"]');
      if (!checkbox.checked) {
        checkbox.removeAttribute('disabled');
        lang.classList.remove('no-pointer-events');
      }
    });
  }

  const handleOptionClick = evt => {
    const option = evt.target;
    const selectWrapper = option.closest('.wrapper');
    const transSelector = selectWrapper.querySelector('#translationSelect');
    if (transSelector) {
      const checkbox = option.querySelector(`input[type='checkbox']`);
      if (checkbox) {
        checkbox.checked = !checkbox?.checked;
        const option = checkbox.closest('.option');
        checkbox.checked
        ? option.classList.add('selected')
        : option.classList.remove('selected');
      }
      updateSelectedTranslationLangs();
      const selected = document.querySelectorAll('.trans-languages .selected');
      selected.length >= maxTransLangs
        ? disableAllUnchecked()
        : enableAllUnchecked();
    } else {
      updateSelection(option);
    }
    selectWrapper.querySelector('.select-btn').focus();
    selectWrapper.classList.remove('active');
  }

  const handleSelectionShortcuts = evt => {
    const key = evt.key;
    ['ArrowDown', 'ArrowUp', 'Enter', 'Escape'].includes(key) && evt.preventDefault();

    const selectionContent = evt.target.closest('form .content');
    const focusedOption = document.activeElement.closest('.option');
    const focusedInput = document.activeElement.closest('input[type="search"]');

    const keysMap = [
      {command: /ArrowDown/, action: () => {
        //- focusedInput ? getNextVisibleSibling(selectionContent.querySelector('.selected'))?.focus()
        //- :
        // if there is a focused option, focus the next one, else focus the first one
        (getNextVisibleSibling(focusedOption) ??
        getFirstVisibleSibling(selectionContent.querySelector('.options')))
        .focus();
      }},

      {command: /ArrowUp/, action: () => {
        (getPreviousVisibleSibling(focusedOption) ??
        getLastVisibleSibling(selectionContent.querySelector('.options')))
        .focus();
      }},

      {command: /Enter/, action: () => focusedOption?.click()},
      
      {command: /Escape/, action: () => selectionContent.closest('.wrapper').classList.remove('active')},

      {command: /[a-z]/i, action: () => {
        selectionContent.querySelector(`input[type='search']`).focus();
      }},
    ];

    keysMap.find(({command}) => command.test(key))?.action();
  }

  const handleSelectionInput = evt => {
    l('handleSelectionInput');
    const input = evt.target;
    const options = Array.from(input.closest('.content').querySelectorAll('.option'));
    if (input.getAttribute('type') === 'checkbox') {
      const option = input.closest('.option');
      input.checked
      ? option.classList.add('selected')
      : option.classList.remove('selected');
      updateSelectedTranslationLangs();
      const selected = document.querySelectorAll('.trans-languages .selected');
      selected.length >= maxTransLangs
        ? disableAllUnchecked()
        : enableAllUnchecked();
    } else if (input.getAttribute('type') === 'search') {
      const selectButton = input.closest('.wrapper').querySelector('.select-btn');
      selectButton.id === 'languageSelect' && options.shift();
      const filteredOptions = filterOptions(options, input.value);

      options.forEach(option => {
        filteredOptions.includes(option)
        ? option.classList.remove('hidden')
        : option.classList.add('hidden');
      });
    }
  }

  const removeSelectedTranslationLang = evt => {
    const selectedLang = evt.target.closest('.selected-lang');
    const selectedOptions = Array.from(document.querySelectorAll('.trans-languages .selected'));
    const option = selectedOptions.find(opt => opt.dataset.lang === selectedLang.dataset.lang);
    const selectedLangsNumEl = document.querySelector('.selected-langs-num');
    const checkbox = option?.querySelector('input[type="checkbox"]');
    option?.classList.remove('selected');
    checkbox && (checkbox.checked = false);
    selectedLang.remove();
    selectedLangsNumEl.textContent = document.querySelectorAll('.trans-languages .selected').length;
  }

  const disableTranscribeLang = evt => {
    const transcribeLang = document.querySelector('#language').textContent;
    const transLangs = Array.from(document.querySelectorAll('.trans-languages .option'));
    const transLang = transLangs.find(lang => lang.textContent === transcribeLang);
    const selectedLangs = Array.from(document.querySelectorAll('.selected-lang'));
    const selectedLang = selectedLangs.find(lang => lang.textContent.trim() === transcribeLang);
    const checkbox = transLang?.querySelector('input[type="checkbox"]');
    transLangs.forEach(lang => {
      lang.querySelector('input[type="checkbox"]').removeAttribute('disabled');
      lang.classList.remove('no-pointer-events');
    });
    transLang?.classList.remove('selected');
    transLang?.classList.add('no-pointer-events');
    if (checkbox) {
      checkbox.checked = false;
      checkbox.setAttribute('disabled', true);
    }
    selectedLang?.remove();
    const selectedLangsNumEl = document.querySelector('.selected-langs-num');
    selectedLangsNumEl.textContent = document.querySelectorAll('.trans-languages .selected').length;
  }

  const getSelectedLangs = () => {
    const selectedLangs = Array.from(document.querySelectorAll('.selected-lang'));
    return selectedLangs.map(lang => ({
      code: lang.dataset.lang,
      name: lang.textContent.trim()
    }));
  }