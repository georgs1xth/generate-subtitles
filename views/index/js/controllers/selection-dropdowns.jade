script.

  const updateSelection = option => {
    const selectedValueEl = option.closest('.wrapper').querySelector('.select-value');
    const selectedOption = option.closest('.wrapper').querySelector('.selected');
    selectedOption.classList.remove('selected');
    option.classList.add('selected');
    selectedValueEl.textContent = option.textContent;
    selectedValueEl.dataset.value = option.dataset.value;
  }

  const handleSelectionButtonClick = evt => {
    const selectWrapper = evt.target.closest('.wrapper');
    const input = selectWrapper.querySelector('.search input');
    selectWrapper.classList.toggle('active');
    l(evt.target.closest('.select-btn'));
    if (selectWrapper.classList.contains('active')) {
      input.focus();
      input.select();
      selectWrapper.querySelector('.selected')?.scrollIntoView({block: 'center', behavior: 'smooth'});
    } else {
      if (evt.target.id === 'translationSelect') {

      }
      selectWrapper.querySelector('.select-btn').focus(); // BUG: doesn't focus
    }
  }

  const updateSelectedLangsNumber = () => $('.selected-langs-num').text(selectedTransLangs.length);

  const disableOption = option => {
    option.querySelector('input')?.setAttribute('disabled', true);
    option?.classList.add('no-pointer-events');
  }

  const enableOption = option => {
    option?.querySelector('input').removeAttribute('disabled');
    option?.classList.remove('no-pointer-events');
  }

  const disableAllUnchecked = () => {
    [...$('.trans-languages .option')].forEach(lang => {
      !selectedTransLangs.includes(lang.textContent) && disableOption(lang);
    });
  }

  const enableAllUnchecked = () => {
    const transcribeLang = $('#language').text();
    [...$('.trans-languages .option')].forEach(lang => {
      const transLang = lang.querySelector('label').textContent;
      !selectedTransLangs.includes(lang.textContent) && transLang !== transcribeLang && enableOption(lang);
    });
  }

  const renderSelectedTranslationLangs = () => {
    $('.selected-langs').html(selectedTransLangs.map(opt => `
      <li class='selected-lang' data-lang='${opt}'>
        <p>${opt}</p>
        <span><i class='fa-solid fa-circle-xmark'></i></span>
      </li>
    `).join('') || '');
    updateSelectedLangsNumber();
    selectedTransLangs.length >= maxTransLangs
      ? disableAllUnchecked()
      : enableAllUnchecked();
  }

  const selectTransLang = option => {
    option.classList.add('selected');
    selectedTransLangs.push(option.textContent);
  }

  const deselectTransLang = option => {
    selectedTransLangs = selectedTransLangs.filter(lang => lang !== option.textContent);
    const checkbox = option?.querySelector('input[type="checkbox"]');
    checkbox && (checkbox.checked = false);
    option?.classList.remove('selected');
  }

  const handleOptionClick = evt => {
    const option = evt.target;
    const selectWrapper = option.closest('.wrapper');
    const transSelector = selectWrapper.querySelector('#translationSelect');
    if (transSelector) {
      const checkbox = option.querySelector(`input[type='checkbox']`);
      if (!checkbox?.hasAttribute('disabled')) {
        checkbox.checked = !checkbox?.checked;
        checkbox.checked
          ? selectTransLang(option)
          : deselectTransLang(option);
      }
      renderSelectedTranslationLangs();
    } else {
      updateSelection(option);
    }
    selectWrapper.querySelector('.select-btn').focus();
    selectWrapper.classList.remove('active');
  }

  const handleSelectionShortcuts = evt => {
    const key = evt.key;
    ['ArrowDown', 'ArrowUp', 'Enter', 'Escape'].includes(key) && evt.preventDefault();

    const selectionContent = evt.target.closest('form .content');
    const focusedOption = document.activeElement.closest('.option');
    const focusedInput = document.activeElement.closest('input[type="search"]');

    const keysMap = [
      {command: /ArrowDown/, action: () => {
        //- focusedInput ? getNextVisibleSibling(selectionContent.querySelector('.selected'))?.focus()
        //- :
        // if there is a focused option, focus the next one, else focus the first one
        (getNextVisibleSibling(focusedOption) ??
        getFirstVisibleSibling(selectionContent.querySelector('.options')))
        .focus();
      }},

      {command: /ArrowUp/, action: () => {
        (getPreviousVisibleSibling(focusedOption) ??
        getLastVisibleSibling(selectionContent.querySelector('.options')))
        .focus();
      }},

      {command: /Enter/, action: () => focusedOption?.click()},

      {command: /Escape/, action: () => selectionContent.closest('.wrapper').classList.remove('active')},

      {command: /[a-z]/i, action: () => {
        selectionContent.querySelector(`input[type='search']`).focus();
      }},
    ];

    keysMap.find(({command}) => command.test(key))?.action();
  }

  const handleSelectionInput = evt => {
    l('handleSelectionInput');
    const input = evt.target;
    const options = Array.from(input.closest('.content').querySelectorAll('.option'));
    if (input.getAttribute('type') === 'checkbox') {
      const option = input.closest('.option');
      input.checked
        ? selectTransLang(option)
        : deselectTransLang(option);
      renderSelectedTranslationLangs();
    } else if (input.getAttribute('type') === 'search') {
      const selectButton = input.closest('.wrapper').querySelector('.select-btn');
      selectButton.id === 'languageSelect' && options.shift();
      const filteredOptions = filterOptions(options, input.value);

      options.forEach(option => {
        filteredOptions.includes(option)
        ? option.classList.remove('hidden')
        : option.classList.add('hidden');
      });
    }
  }

  const removeSelectedTranslationLang = evt => {
    const selectedLang = evt.target.closest('.selected-lang').dataset.lang;
    const option = [...$('.trans-languages .selected')].find(opt => opt.textContent.trim() === selectedLang);
    deselectTransLang(option);
    renderSelectedTranslationLangs();
  }

  const disableTranscribeLang = evt => {
    const transcribeLang = $('#language').text();
    const transLang = [...$('.trans-languages .option')].find(lang => lang.textContent === transcribeLang);
    const [disabledLang] = [...$(`.trans-languages .option:has(input[type='checkbox'][disabled])`)];
    enableOption(disabledLang);
    deselectTransLang(transLang);
    disableOption(transLang);
    renderSelectedTranslationLangs();
  }

  const getSelectedLangs = () => {
    return [...$('.selected-lang')].map(lang => ({
      code: lang.dataset.lang,
      name: lang.textContent.trim()
    }));
  }